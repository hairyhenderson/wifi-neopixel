#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <Adafruit_NeoPixel.h>

#define len(x)       (sizeof(x) / sizeof(x[0]))

// ESP8266 pinouts:
// #0  no internal pullup. Connected to both a mini tactile switch and red LED.
//     Used by the ESP8266 to determine when to boot into the bootloader. If 
//     held low during power-up it will start bootloading! Can be used as an
//     output to blink the red LED.
// #2  also used to detect boot-mode. Connected to the blue LED near the WiFi
//     antenna. Can be used as any output and blink the blue LED.
// #4  I2C SDA by default. Recommended if using Arduino, connect I2C devices here!
// #5  I2C SCL by default. Recommended if using Arduino, connect I2C devices here!
// #12 regular IO
// #13 regular IO
// #14 regular IO
// #15 also used to detect boot-mode. Make sure this pin isn't pulled high on
//     startup. Can just be used as an output.
// #16 can be used to wake up out of deep-sleep mode, you'll need to connect it to
//     the RESET pin

// Notes:
// - all GPIO pins are 3.3V logic level in and out, and are NOT 5V compatible. 12mA max!
// - All except #0 have the ability to turn on an internal pullup
// - Rev A of this board had GPIO #4 and #5 swapped so if #4/#5 aren't working for you, try swapping!

#define PIN 12
// #define PIN 2

// Parameter 1 = number of pixels in strip
// Parameter 2 = Arduino pin number (most are valid)
// Parameter 3 = pixel type flags, add together as needed:
//   NEO_KHZ800  800 KHz bitstream (most NeoPixel products w/WS2812 LEDs)
//   NEO_KHZ400  400 KHz (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)
//   NEO_GRB     Pixels are wired for GRB bitstream (most NeoPixel products)
//   NEO_RGB     Pixels are wired for RGB bitstream (v1 FLORA pixels, not v2) 
//   NEO_RGBW    Pixels are wired for RGBW bitstream (NeoPixel RGBW products)
Adafruit_NeoPixel strip = Adafruit_NeoPixel(30, PIN, NEO_GRB + NEO_KHZ800);

// IMPORTANT: To reduce NeoPixel burnout risk, add 1000 uF capacitor across
// pixel power leads, add 300 - 500 Ohm resistor on first pixel's data input
// and minimize distance between Arduino and first pixel.  Avoid connecting
// on a live circuit...if you must, connect GND first.

// either create password.h with these defined, or comment out this line and
// set your WiFi SSID and key below
#include "password.h"
const char *ssid = STASSID;
const char *password = STAPSK;

ESP8266WebServer server(80);

// stolen from https://community.particle.io/t/neopixel-sunrise-alarm-clock/2243/22
const uint8_t redList[300]   = {
    0x08, 0x08, 0x11, 0x1a,  0x23, 0x2b, 0x34, 0x3d,    0x46, 0x4f, 0x57, 0x60,  0x69, 0x70, 0x7b, 0x83,
    0x8a, 0x95, 0x9e, 0xa7,  0xaf, 0xb8, 0xc1, 0xca,    0xd3, 0xdb, 0xe4, 0xed,  0xf6, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,  0xff, 0xff, 0xff, 0xff,    0xff, 0xff, 0xff, 0xff,  0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,  0xff, 0xff, 0xff, 0xff,    0xff, 0xff, 0xff, 0xff,  0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,  0xff, 0xff, 0xff, 0xff,    0xff, 0xff, 0xff, 0xff,  0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,  0xff, 0xff, 0xff, 0xff,    0xff, 0xff, 0xff, 0xff,  0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,  0xfe, 0xfd, 0xfd, 0xfc,    0xfc, 0xfb, 0xfa, 0xfa,  0xf9, 0xf9, 0xf8, 0xf7,
    0xf7, 0xf6, 0xf6, 0xf5,  0xf5, 0xf4, 0xf3, 0xf3,    0xf2, 0xf2, 0xf1, 0xf0,  0xf0, 0xef, 0xef, 0xee,
    0xed, 0xed, 0xec, 0xec,  0xeb, 0xeb, 0xea, 0xe9,    0xe9, 0xe8, 0xe8, 0xe7,  0xe6, 0xe6, 0xe5, 0xe5,
    0xe4, 0xe4, 0xe3, 0xe2,  0xe2, 0xe1, 0xe1, 0xe0,    0xdf, 0xdf, 0xde, 0xde,  0xdd, 0xdc, 0xdc, 0xdb,
    0xdb, 0xda, 0xda, 0xd9,  0xd8, 0xd8, 0xd7, 0xd7,    0xd6, 0xd5, 0xd5, 0xd4,  0xd4, 0xd3, 0xd3, 0xd2,
    0xd1, 0xd1, 0xd0, 0xd0,  0xcf, 0xce, 0xce, 0xcd,    0xcd, 0xcc, 0xcb, 0xcb,  0xca, 0xca, 0xc9, 0xc9,
    0xc8, 0xc7, 0xc7, 0xc6,  0xc6, 0xc5, 0xc4, 0xc4,    0xc3, 0xc3, 0xc2, 0xc1,  0xc1, 0xc0, 0xc0, 0xbf,
    0xbf, 0xbe, 0xbd, 0xbd,  0xbc, 0xbc, 0xbb, 0xba,    0xba, 0xb9, 0xb9, 0xb8,  0xb8, 0xb7, 0xb6, 0xb6,
    0xb5, 0xb5, 0xb4, 0xb3,  0xb3, 0xb2, 0xb2, 0xb1,    0xb0, 0xb0, 0xaf, 0xaf,  0xae, 0xae, 0xad, 0xac,
    0xac, 0xab, 0xab, 0xaa,  0xa9, 0xa9, 0xa8, 0xa8,    0xa7, 0xa7, 0xa6, 0xa5,  0xa5, 0xa4, 0xa4, 0xa3,
    0xa2, 0xa2, 0xa1, 0xa1,  0xa0, 0x9f, 0x9f, 0x9e,    0x9e, 0x9d, 0x9d, 0x9c,  0x9b, 0x9b, 0x9a, 0x9a,
    0x99, 0x98, 0x98, 0x97,  0x97, 0x96, 0x96, 0x95,    0x94, 0x93, 0x92, 0x91,  0x90, 0x8e, 0x8d, 0x8c,
    0x8b, 0x8a, 0x89, 0x88,  0x87, 0x86, 0x85, 0x84,    0x83, 0x82, 0x81, 0x80
};
const uint8_t greenList[300] = {
    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x02,
    0x04, 0x06, 0x08, 0x0a,  0x0d, 0x0f, 0x11, 0x13,    0x15, 0x17, 0x1a, 0x1c,  0x1e, 0x20, 0x22, 0x24,
    0x27, 0x29, 0x2b, 0x2d,  0x2f, 0x31, 0x34, 0x36,    0x38, 0x3a, 0x3c, 0x3e,  0x41, 0x43, 0x45, 0x47,
    0x49, 0x4b, 0x4e, 0x50,  0x52, 0x54, 0x56, 0x58,    0x5b, 0x5d, 0x5f, 0x61,  0x63, 0x65, 0x68, 0x6a,
    0x6c, 0x6e, 0x70, 0x70,  0x75, 0x77, 0x79, 0x7b,    0x7d, 0x80, 0x80, 0x82,  0x84, 0x87, 0x89, 0x8c,
    0x8e, 0x91, 0x93, 0x96,  0x96, 0x96, 0x96, 0x96,    0x96, 0x96, 0x96, 0x96,  0x96, 0x96, 0x96, 0x96,
    0x96, 0x96, 0x96, 0x96,  0x96, 0x96, 0x96, 0x96,    0x96, 0x96, 0x96, 0x96,  0x96, 0x96, 0x96, 0x96,
    0x96, 0x96, 0x96, 0x96,  0x96, 0x96, 0x96, 0x96,    0x96, 0x96, 0x96, 0x96,  0x96, 0x96, 0x96, 0x96,
    0x96, 0x96, 0x96, 0x96,  0x96, 0x96, 0x96, 0x96,    0x96, 0x96, 0x96, 0x96,  0x96, 0x96, 0x96, 0x96,
    0x96, 0x96, 0x96, 0x96,  0x96, 0x96, 0x96, 0x96,    0x96, 0x96, 0x96, 0x96,  0x96, 0x96, 0x96, 0x96,
    0x96, 0x96, 0x96, 0x96,  0x96, 0x96, 0x96, 0x96,    0x96, 0x96, 0x96, 0x96,  0x96, 0x96, 0x96, 0x96,
    0x96, 0x96, 0x96, 0x96,  0x96, 0x96, 0x96, 0x96,    0x96, 0x96, 0x96, 0x96,  0x96, 0x96, 0x96, 0x96,
    0x96, 0x96, 0x96, 0x96,  0x96, 0x96, 0x96, 0x96,    0x96, 0x96, 0x96, 0x96,  0x96, 0x96, 0x96, 0x96,
    0x96, 0x96, 0x96, 0x96,  0x96, 0x96, 0x96, 0x96,    0x96, 0x96, 0x96, 0x96,  0x96, 0x96, 0x96, 0x96,
    0x96, 0x96, 0x96, 0x96,  0x96, 0x96, 0x96, 0x96,    0x96, 0x96, 0x96, 0x96,  0x96, 0x96, 0x96, 0x96,
    0x96, 0x96, 0x96, 0x96,  0x96, 0x96, 0x96, 0x96,    0x96, 0x96, 0x96, 0x96,  0x96, 0x96, 0x96, 0x96,
    0x96, 0x96, 0x96, 0x96,  0x96, 0x96, 0x96, 0x95,    0x94, 0x93, 0x92, 0x91,  0x90, 0x8e, 0x8d, 0x8c,
    0x8b, 0x8a, 0x89, 0x88,  0x87, 0x86, 0x85, 0x84,    0x83, 0x82, 0x81, 0x80
};
const uint8_t blueList[300]  = {
    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x01, 0x02, 0x03, 0x05,    0x06, 0x07, 0x09, 0x0a,  0x0b, 0x0c, 0x0e, 0x0f,
    0x10, 0x12, 0x13, 0x14,  0x16, 0x17, 0x18, 0x19,    0x1b, 0x1c, 0x1d, 0x1f,  0x20, 0x21, 0x22, 0x24,
    0x25, 0x26, 0x28, 0x29,  0x2a, 0x2c, 0x2d, 0x2e,    0x2f, 0x31, 0x32, 0x33,  0x35, 0x36, 0x37, 0x39,
    0x3a, 0x3b, 0x3c, 0x3e,  0x3f, 0x40, 0x42, 0x43,    0x44, 0x45, 0x47, 0x48,  0x49, 0x4b, 0x4c, 0x4d,
    0x4f, 0x50, 0x51, 0x52,  0x54, 0x55, 0x56, 0x58,    0x59, 0x5a, 0x5c, 0x5d,  0x5e, 0x5f, 0x61, 0x62,
    0x63, 0x65, 0x66, 0x67,  0x68, 0x6a, 0x6b, 0x6c,    0x6e, 0x6f, 0x70, 0x70,  0x73, 0x74, 0x75, 0x77,
    0x78, 0x79, 0x7b, 0x7c,  0x7d, 0x7f, 0x80, 0x81,    0x82, 0x84, 0x85, 0x86,  0x88, 0x89, 0x8a, 0x8b,
    0x8d, 0x8e, 0x8f, 0x91,  0x92, 0x93, 0x95, 0x96,    0x97, 0x98, 0x9a, 0x9b,  0x9c, 0x9e, 0x9f, 0xa0,
    0xa2, 0xa3, 0xa4, 0xa5,  0xa7, 0xa8, 0xa9, 0xab,    0xac, 0xad, 0xae, 0xb0,  0xb1, 0xb2, 0xb4, 0xb5,
    0xb6, 0xb8, 0xb9, 0xba,  0xbb, 0xbd, 0xbe, 0xbf,    0xc1, 0xc2, 0xc3, 0xc5,  0xc6, 0xc7, 0xc8, 0xca,
    0xcb, 0xcc, 0xce, 0xcf,  0xd0, 0xd1, 0xd3, 0xd4,    0xd5, 0xd7, 0xd8, 0xd9,  0xdb, 0xdc, 0xdd, 0xde,
    0xe0, 0xe1, 0xe2, 0xe4,  0xe5, 0xe6, 0xe8, 0xe9,    0xea, 0xeb, 0xec, 0xed,  0xee, 0xf0, 0xf1, 0xf2,
    0xf3, 0xf4, 0xf5, 0xf6,  0xf7, 0xf8, 0xf9, 0xfa,    0xfb, 0xfc, 0xfd, 0xff
};

void setup() {
  uint8_t wifiCounter;
  Serial.begin(115200);
  Serial.println();
  strip.begin();
  strip.show(); // Initialize all pixels to 'off'

  Serial.printf("Connecting to %s ", ssid);
  WiFi.begin(ssid, password);

  wifiCounter = 0;
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    strip.setPixelColor(wifiCounter, strip.Color(128, 0, 0));
    strip.show();

    wifiCounter++;
  }
  Serial.println(" connected");
  colorWipe(strip.Color(0, 128, 0), 5);
  colorWipe(strip.Color(0, 0, 0), 5);

  if (MDNS.begin("esp8266")) {
    Serial.println("MDNS responder started");
  }

  server.on("/", handleRoot);
  server.on("/sunrise", []() {
    String durS;
    if (server.args() > 0) {
      for (uint8_t i = 0; i < server.args(); i++) {
        if (server.argName(i) == "duration") {
          durS = server.arg(i);
          break;
        } 
      }
    }
    unsigned long duration = 10;
    if (len(durS) > 0) {
      duration = durS.toInt();
    }
    Serial.printf("sunrise with %dms between colours\n", duration);
    sunriseSimple(duration);
    server.send(204, "", "");
  });
  server.on("/sunset", []() {
    sunsetSimple(5);
    server.send(204, "", "");
  });
  server.on("/rainbow", []() {
    rainbowCycle(20);
    server.send(204, "text/plain", "");
  });
  server.onNotFound(handleNotFound);
  server.begin();
  Serial.printf("Web server started, open %s in a web browser\n", WiFi.localIP().toString().c_str());
}

void loop() {
  MDNS.update();
  server.handleClient();
}


// Fill the dots one after the other with a color
void colorWipe(uint32_t c, uint8_t wait) {
  for(uint16_t i=0; i<strip.numPixels(); i++) {
    strip.setPixelColor(i, c);
    strip.show();
    delay(wait);
  }
}

void rainbow(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256; j++) {
    for(i=0; i<strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel((i+j) & 255));
    }
    strip.show();
    delay(wait);
  }
}

// // Slightly different, this makes the rainbow equally distributed throughout
void rainbowCycle(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256*5; j++) { // 5 cycles of all colors on wheel
    for(i=0; i< strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) & 255));
    }
    strip.show();
    delay(wait);
  }
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
  if(WheelPos < 85) {
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  }
  if(WheelPos < 170) {
    WheelPos -= 85;
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  WheelPos -= 170;
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}

void handleRoot() {
  char temp[400];
  int sec = millis() / 1000;
  int min = sec / 60;
  int hr = min / 60;

  snprintf(temp, 400,

           "<html>\
  <head>\
    <meta http-equiv='refresh' content='5'/>\
    <title>ESP8266 Demo</title>\
    <style>\
      body { background-color: #cccccc; font-family: Arial, Helvetica, Sans-Serif; Color: #000088; }\
    </style>\
  </head>\
  <body>\
    <h1>Hello from ESP8266!</h1>\
    <p>Uptime: %02d:%02d:%02d</p>\
    <img src=\"/test.svg\" />\
  </body>\
</html>",

           hr, min % 60, sec % 60
          );
  server.send(200, "text/html", temp);
}

void handleNotFound() {
  String message = "File Not Found\n\n";
  message += "URI: ";
  message += server.uri();
  message += "\nMethod: ";
  message += (server.method() == HTTP_GET) ? "GET" : "POST";
  message += "\nArguments: ";
  message += server.args();
  message += "\n";

  for (uint8_t i = 0; i < server.args(); i++) {
    message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
  }

  server.send(404, "text/plain", message);
}

// void sunset() {
//   for (uint16_t o = len(redList) - strip.numPixels(); o >= 0 && o < len(redList); o--) {
//     for (uint8_t i = 0; i < strip.numPixels(); i++) {
//       uint32_t c = strip.Color(redList[i+o], greenList[i+o], blueList[i+o]);

//       strip.setPixelColor(i, c);
//       strip.show();
//     }
//   }
// }

// looks fancier, but is broken
// void sunrise() {
//   for (uint16_t o = 0; o < (300 - 30 + 1); o++) {
//     for (uint8_t i = 0; i < 30; i++) {
//       uint32_t c = strip.Color(redList[i+o], greenList[i+o], blueList[i+o]);

//       strip.setPixelColor(i, c);
//       strip.show();
//     }
//   }
// }

// duration - time (ms) to sleep between applying each colour
void sunriseSimple(unsigned long duration) {
    for (uint16_t x = 0; x < len(redList); x++) {
      uint32_t c = strip.Color(redList[x], greenList[x], blueList[x]);
      for (uint8_t i = 0; i < strip.numPixels(); i++) {
        strip.setPixelColor(i, c);
      }
      strip.show();
    	delay(duration);
    }
}

// duration - time (ms) to sleep between applying each colour - usually 1/6th of sunrise length
void sunsetSimple(unsigned long duration) {
    for (uint16_t x = 0; x < len(redList)+1; x++){
      uint16_t idx = len(redList)-x;
      uint32_t c = strip.Color(redList[idx], greenList[idx], blueList[idx]);
      for (uint8_t i = 0; i < strip.numPixels(); i++) {
        strip.setPixelColor(i, c);
      }
      strip.show();
    	delay(duration);
    };
}
